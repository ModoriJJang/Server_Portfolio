// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace TH_Server.TH_Packet
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct LOGIN_DATA : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static LOGIN_DATA GetRootAsLOGIN_DATA(ByteBuffer _bb) { return GetRootAsLOGIN_DATA(_bb, new LOGIN_DATA()); }
  public static LOGIN_DATA GetRootAsLOGIN_DATA(ByteBuffer _bb, LOGIN_DATA obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LOGIN_DATA __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Token { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTokenBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTokenBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTokenArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<TH_Server.TH_Packet.LOGIN_DATA> CreateLOGIN_DATA(FlatBufferBuilder builder,
      StringOffset tokenOffset = default(StringOffset)) {
    builder.StartTable(1);
    LOGIN_DATA.AddToken(builder, tokenOffset);
    return LOGIN_DATA.EndLOGIN_DATA(builder);
  }

  public static void StartLOGIN_DATA(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddToken(FlatBufferBuilder builder, StringOffset tokenOffset) { builder.AddOffset(0, tokenOffset.Value, 0); }
  public static Offset<TH_Server.TH_Packet.LOGIN_DATA> EndLOGIN_DATA(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TH_Server.TH_Packet.LOGIN_DATA>(o);
  }
}


static public class LOGIN_DATAVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Token*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
