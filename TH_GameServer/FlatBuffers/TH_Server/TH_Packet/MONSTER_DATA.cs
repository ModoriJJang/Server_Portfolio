// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace TH_Server.TH_Packet
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MONSTER_DATA : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static MONSTER_DATA GetRootAsMONSTER_DATA(ByteBuffer _bb) { return GetRootAsMONSTER_DATA(_bb, new MONSTER_DATA()); }
  public static MONSTER_DATA GetRootAsMONSTER_DATA(ByteBuffer _bb, MONSTER_DATA obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MONSTER_DATA __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TH_Server.TH_Packet.Vector3? Position { get { int o = __p.__offset(4); return o != 0 ? (TH_Server.TH_Packet.Vector3?)(new TH_Server.TH_Packet.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartMONSTER_DATA(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<TH_Server.TH_Packet.Vector3> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static Offset<TH_Server.TH_Packet.MONSTER_DATA> EndMONSTER_DATA(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TH_Server.TH_Packet.MONSTER_DATA>(o);
  }
}


static public class MONSTER_DATAVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Position*/, 12 /*TH_Server.TH_Packet.Vector3*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
