// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace TH_Server.TH_Packet
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Protocol : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static Protocol GetRootAsProtocol(ByteBuffer _bb) { return GetRootAsProtocol(_bb, new Protocol()); }
  public static Protocol GetRootAsProtocol(ByteBuffer _bb, Protocol obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyProtocol(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, ProtocolVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Protocol __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Clientid { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClientidBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetClientidBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetClientidArray() { return __p.__vector_as_array<byte>(4); }
  public TH_Server.TH_Packet.EServer Server { get { int o = __p.__offset(6); return o != 0 ? (TH_Server.TH_Packet.EServer)__p.bb.GetSbyte(o + __p.bb_pos) : TH_Server.TH_Packet.EServer.Server_1; } }
  public int Channel { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public TH_Server.TH_Packet.Packet? Packet(int j) { int o = __p.__offset(10); return o != 0 ? (TH_Server.TH_Packet.Packet?)(new TH_Server.TH_Packet.Packet()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PacketLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<TH_Server.TH_Packet.Protocol> CreateProtocol(FlatBufferBuilder builder,
      StringOffset clientidOffset = default(StringOffset),
      TH_Server.TH_Packet.EServer server = TH_Server.TH_Packet.EServer.Server_1,
      int channel = 0,
      VectorOffset packetOffset = default(VectorOffset)) {
    builder.StartTable(4);
    Protocol.AddPacket(builder, packetOffset);
    Protocol.AddChannel(builder, channel);
    Protocol.AddClientid(builder, clientidOffset);
    Protocol.AddServer(builder, server);
    return Protocol.EndProtocol(builder);
  }

  public static void StartProtocol(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddClientid(FlatBufferBuilder builder, StringOffset clientidOffset) { builder.AddOffset(0, clientidOffset.Value, 0); }
  public static void AddServer(FlatBufferBuilder builder, TH_Server.TH_Packet.EServer server) { builder.AddSbyte(1, (sbyte)server, 0); }
  public static void AddChannel(FlatBufferBuilder builder, int channel) { builder.AddInt(2, channel, 0); }
  public static void AddPacket(FlatBufferBuilder builder, VectorOffset packetOffset) { builder.AddOffset(3, packetOffset.Value, 0); }
  public static VectorOffset CreatePacketVector(FlatBufferBuilder builder, Offset<TH_Server.TH_Packet.Packet>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePacketVectorBlock(FlatBufferBuilder builder, Offset<TH_Server.TH_Packet.Packet>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePacketVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<TH_Server.TH_Packet.Packet>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePacketVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<TH_Server.TH_Packet.Packet>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPacketVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<TH_Server.TH_Packet.Protocol> EndProtocol(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TH_Server.TH_Packet.Protocol>(o);
  }
  public static void FinishProtocolBuffer(FlatBufferBuilder builder, Offset<TH_Server.TH_Packet.Protocol> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedProtocolBuffer(FlatBufferBuilder builder, Offset<TH_Server.TH_Packet.Protocol> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class ProtocolVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Clientid*/, false)
      && verifier.VerifyField(tablePos, 6 /*Server*/, 1 /*TH_Server.TH_Packet.EServer*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*Channel*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*Packet*/, TH_Server.TH_Packet.PacketVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
