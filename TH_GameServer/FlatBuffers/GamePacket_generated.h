// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMEPACKET_TH_SERVER_TH_PACKET_H_
#define FLATBUFFERS_GENERATED_GAMEPACKET_TH_SERVER_TH_PACKET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace TH_Server {
namespace TH_Packet {

struct LOGIN_DATA;
struct LOGIN_DATABuilder;

struct CHAT_DATA;
struct CHAT_DATABuilder;

struct PLAYER_DATA;
struct PLAYER_DATABuilder;

struct MONSTER_DATA;
struct MONSTER_DATABuilder;

struct Vector3;

struct Protocol;
struct ProtocolBuilder;

struct Packet;
struct PacketBuilder;

enum Server : int8_t {
  Server_Server_1 = 0,
  Server_Server_2 = 1,
  Server_Server_END = 2,
  Server_MIN = Server_Server_1,
  Server_MAX = Server_Server_END
};

inline const Server (&EnumValuesServer())[3] {
  static const Server values[] = {
    Server_Server_1,
    Server_Server_2,
    Server_Server_END
  };
  return values;
}

inline const char * const *EnumNamesServer() {
  static const char * const names[4] = {
    "Server_1",
    "Server_2",
    "Server_END",
    nullptr
  };
  return names;
}

inline const char *EnumNameServer(Server e) {
  if (::flatbuffers::IsOutRange(e, Server_Server_1, Server_Server_END)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesServer()[index];
}

enum Chat : int8_t {
  Chat_World = 0,
  Chat_Channel = 1,
  Chat_General = 2,
  Chat_Whisper = 3,
  Chat_MIN = Chat_World,
  Chat_MAX = Chat_Whisper
};

inline const Chat (&EnumValuesChat())[4] {
  static const Chat values[] = {
    Chat_World,
    Chat_Channel,
    Chat_General,
    Chat_Whisper
  };
  return values;
}

inline const char * const *EnumNamesChat() {
  static const char * const names[5] = {
    "World",
    "Channel",
    "General",
    "Whisper",
    nullptr
  };
  return names;
}

inline const char *EnumNameChat(Chat e) {
  if (::flatbuffers::IsOutRange(e, Chat_World, Chat_Whisper)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesChat()[index];
}

enum PacketData : uint8_t {
  PacketData_NONE = 0,
  PacketData_LOGIN = 1,
  PacketData_CHAT = 2,
  PacketData_PLAYER = 3,
  PacketData_MONSTER = 4,
  PacketData_MIN = PacketData_NONE,
  PacketData_MAX = PacketData_MONSTER
};

inline const PacketData (&EnumValuesPacketData())[5] {
  static const PacketData values[] = {
    PacketData_NONE,
    PacketData_LOGIN,
    PacketData_CHAT,
    PacketData_PLAYER,
    PacketData_MONSTER
  };
  return values;
}

inline const char * const *EnumNamesPacketData() {
  static const char * const names[6] = {
    "NONE",
    "LOGIN",
    "CHAT",
    "PLAYER",
    "MONSTER",
    nullptr
  };
  return names;
}

inline const char *EnumNamePacketData(PacketData e) {
  if (::flatbuffers::IsOutRange(e, PacketData_NONE, PacketData_MONSTER)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPacketData()[index];
}

template<typename T> struct PacketDataTraits {
  static const PacketData enum_value = PacketData_NONE;
};

template<> struct PacketDataTraits<TH_Server::TH_Packet::LOGIN_DATA> {
  static const PacketData enum_value = PacketData_LOGIN;
};

template<> struct PacketDataTraits<TH_Server::TH_Packet::CHAT_DATA> {
  static const PacketData enum_value = PacketData_CHAT;
};

template<> struct PacketDataTraits<TH_Server::TH_Packet::PLAYER_DATA> {
  static const PacketData enum_value = PacketData_PLAYER;
};

template<> struct PacketDataTraits<TH_Server::TH_Packet::MONSTER_DATA> {
  static const PacketData enum_value = PacketData_MONSTER;
};

bool VerifyPacketData(::flatbuffers::Verifier &verifier, const void *obj, PacketData type);
bool VerifyPacketDataVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vector3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vector3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vector3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vector3, 12);

struct LOGIN_DATA FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LOGIN_DATABuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOKEN = 4
  };
  const ::flatbuffers::String *token() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TOKEN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TOKEN) &&
           verifier.VerifyString(token()) &&
           verifier.EndTable();
  }
};

struct LOGIN_DATABuilder {
  typedef LOGIN_DATA Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_token(::flatbuffers::Offset<::flatbuffers::String> token) {
    fbb_.AddOffset(LOGIN_DATA::VT_TOKEN, token);
  }
  explicit LOGIN_DATABuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LOGIN_DATA> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LOGIN_DATA>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LOGIN_DATA> CreateLOGIN_DATA(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> token = 0) {
  LOGIN_DATABuilder builder_(_fbb);
  builder_.add_token(token);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LOGIN_DATA> CreateLOGIN_DATADirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *token = nullptr) {
  auto token__ = token ? _fbb.CreateString(token) : 0;
  return TH_Server::TH_Packet::CreateLOGIN_DATA(
      _fbb,
      token__);
}

struct CHAT_DATA FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CHAT_DATABuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TARGET = 4,
    VT_CHAT_TYPE = 6,
    VT_MESSAGE = 8
  };
  const ::flatbuffers::String *target() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TARGET);
  }
  TH_Server::TH_Packet::Chat chat_type() const {
    return static_cast<TH_Server::TH_Packet::Chat>(GetField<int8_t>(VT_CHAT_TYPE, 0));
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TARGET) &&
           verifier.VerifyString(target()) &&
           VerifyField<int8_t>(verifier, VT_CHAT_TYPE, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct CHAT_DATABuilder {
  typedef CHAT_DATA Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_target(::flatbuffers::Offset<::flatbuffers::String> target) {
    fbb_.AddOffset(CHAT_DATA::VT_TARGET, target);
  }
  void add_chat_type(TH_Server::TH_Packet::Chat chat_type) {
    fbb_.AddElement<int8_t>(CHAT_DATA::VT_CHAT_TYPE, static_cast<int8_t>(chat_type), 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(CHAT_DATA::VT_MESSAGE, message);
  }
  explicit CHAT_DATABuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CHAT_DATA> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CHAT_DATA>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CHAT_DATA> CreateCHAT_DATA(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> target = 0,
    TH_Server::TH_Packet::Chat chat_type = TH_Server::TH_Packet::Chat_World,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  CHAT_DATABuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_target(target);
  builder_.add_chat_type(chat_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CHAT_DATA> CreateCHAT_DATADirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *target = nullptr,
    TH_Server::TH_Packet::Chat chat_type = TH_Server::TH_Packet::Chat_World,
    const char *message = nullptr) {
  auto target__ = target ? _fbb.CreateString(target) : 0;
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return TH_Server::TH_Packet::CreateCHAT_DATA(
      _fbb,
      target__,
      chat_type,
      message__);
}

struct PLAYER_DATA FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PLAYER_DATABuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4
  };
  const TH_Server::TH_Packet::Vector3 *position() const {
    return GetStruct<const TH_Server::TH_Packet::Vector3 *>(VT_POSITION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<TH_Server::TH_Packet::Vector3>(verifier, VT_POSITION, 4) &&
           verifier.EndTable();
  }
};

struct PLAYER_DATABuilder {
  typedef PLAYER_DATA Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(const TH_Server::TH_Packet::Vector3 *position) {
    fbb_.AddStruct(PLAYER_DATA::VT_POSITION, position);
  }
  explicit PLAYER_DATABuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PLAYER_DATA> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PLAYER_DATA>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PLAYER_DATA> CreatePLAYER_DATA(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const TH_Server::TH_Packet::Vector3 *position = nullptr) {
  PLAYER_DATABuilder builder_(_fbb);
  builder_.add_position(position);
  return builder_.Finish();
}

struct MONSTER_DATA FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MONSTER_DATABuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4
  };
  const TH_Server::TH_Packet::Vector3 *position() const {
    return GetStruct<const TH_Server::TH_Packet::Vector3 *>(VT_POSITION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<TH_Server::TH_Packet::Vector3>(verifier, VT_POSITION, 4) &&
           verifier.EndTable();
  }
};

struct MONSTER_DATABuilder {
  typedef MONSTER_DATA Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(const TH_Server::TH_Packet::Vector3 *position) {
    fbb_.AddStruct(MONSTER_DATA::VT_POSITION, position);
  }
  explicit MONSTER_DATABuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MONSTER_DATA> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MONSTER_DATA>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MONSTER_DATA> CreateMONSTER_DATA(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const TH_Server::TH_Packet::Vector3 *position = nullptr) {
  MONSTER_DATABuilder builder_(_fbb);
  builder_.add_position(position);
  return builder_.Finish();
}

struct Protocol FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ProtocolBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENTID = 4,
    VT_SERVER = 6,
    VT_CHANNEL = 8,
    VT_PACKET = 10
  };
  const ::flatbuffers::String *clientid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLIENTID);
  }
  TH_Server::TH_Packet::Server server() const {
    return static_cast<TH_Server::TH_Packet::Server>(GetField<int8_t>(VT_SERVER, 0));
  }
  int32_t channel() const {
    return GetField<int32_t>(VT_CHANNEL, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<TH_Server::TH_Packet::Packet>> *packet() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<TH_Server::TH_Packet::Packet>> *>(VT_PACKET);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLIENTID) &&
           verifier.VerifyString(clientid()) &&
           VerifyField<int8_t>(verifier, VT_SERVER, 1) &&
           VerifyField<int32_t>(verifier, VT_CHANNEL, 4) &&
           VerifyOffset(verifier, VT_PACKET) &&
           verifier.VerifyVector(packet()) &&
           verifier.VerifyVectorOfTables(packet()) &&
           verifier.EndTable();
  }
};

struct ProtocolBuilder {
  typedef Protocol Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_clientid(::flatbuffers::Offset<::flatbuffers::String> clientid) {
    fbb_.AddOffset(Protocol::VT_CLIENTID, clientid);
  }
  void add_server(TH_Server::TH_Packet::Server server) {
    fbb_.AddElement<int8_t>(Protocol::VT_SERVER, static_cast<int8_t>(server), 0);
  }
  void add_channel(int32_t channel) {
    fbb_.AddElement<int32_t>(Protocol::VT_CHANNEL, channel, 0);
  }
  void add_packet(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<TH_Server::TH_Packet::Packet>>> packet) {
    fbb_.AddOffset(Protocol::VT_PACKET, packet);
  }
  explicit ProtocolBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Protocol> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Protocol>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Protocol> CreateProtocol(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> clientid = 0,
    TH_Server::TH_Packet::Server server = TH_Server::TH_Packet::Server_Server_1,
    int32_t channel = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<TH_Server::TH_Packet::Packet>>> packet = 0) {
  ProtocolBuilder builder_(_fbb);
  builder_.add_packet(packet);
  builder_.add_channel(channel);
  builder_.add_clientid(clientid);
  builder_.add_server(server);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Protocol> CreateProtocolDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *clientid = nullptr,
    TH_Server::TH_Packet::Server server = TH_Server::TH_Packet::Server_Server_1,
    int32_t channel = 0,
    const std::vector<::flatbuffers::Offset<TH_Server::TH_Packet::Packet>> *packet = nullptr) {
  auto clientid__ = clientid ? _fbb.CreateString(clientid) : 0;
  auto packet__ = packet ? _fbb.CreateVector<::flatbuffers::Offset<TH_Server::TH_Packet::Packet>>(*packet) : 0;
  return TH_Server::TH_Packet::CreateProtocol(
      _fbb,
      clientid__,
      server,
      channel,
      packet__);
}

struct Packet FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA_TYPE = 4,
    VT_DATA = 6
  };
  TH_Server::TH_Packet::PacketData data_type() const {
    return static_cast<TH_Server::TH_Packet::PacketData>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const TH_Server::TH_Packet::LOGIN_DATA *data_as_LOGIN() const {
    return data_type() == TH_Server::TH_Packet::PacketData_LOGIN ? static_cast<const TH_Server::TH_Packet::LOGIN_DATA *>(data()) : nullptr;
  }
  const TH_Server::TH_Packet::CHAT_DATA *data_as_CHAT() const {
    return data_type() == TH_Server::TH_Packet::PacketData_CHAT ? static_cast<const TH_Server::TH_Packet::CHAT_DATA *>(data()) : nullptr;
  }
  const TH_Server::TH_Packet::PLAYER_DATA *data_as_PLAYER() const {
    return data_type() == TH_Server::TH_Packet::PacketData_PLAYER ? static_cast<const TH_Server::TH_Packet::PLAYER_DATA *>(data()) : nullptr;
  }
  const TH_Server::TH_Packet::MONSTER_DATA *data_as_MONSTER() const {
    return data_type() == TH_Server::TH_Packet::PacketData_MONSTER ? static_cast<const TH_Server::TH_Packet::MONSTER_DATA *>(data()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE, 1) &&
           VerifyOffset(verifier, VT_DATA) &&
           VerifyPacketData(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const TH_Server::TH_Packet::LOGIN_DATA *Packet::data_as<TH_Server::TH_Packet::LOGIN_DATA>() const {
  return data_as_LOGIN();
}

template<> inline const TH_Server::TH_Packet::CHAT_DATA *Packet::data_as<TH_Server::TH_Packet::CHAT_DATA>() const {
  return data_as_CHAT();
}

template<> inline const TH_Server::TH_Packet::PLAYER_DATA *Packet::data_as<TH_Server::TH_Packet::PLAYER_DATA>() const {
  return data_as_PLAYER();
}

template<> inline const TH_Server::TH_Packet::MONSTER_DATA *Packet::data_as<TH_Server::TH_Packet::MONSTER_DATA>() const {
  return data_as_MONSTER();
}

struct PacketBuilder {
  typedef Packet Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data_type(TH_Server::TH_Packet::PacketData data_type) {
    fbb_.AddElement<uint8_t>(Packet::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(::flatbuffers::Offset<void> data) {
    fbb_.AddOffset(Packet::VT_DATA, data);
  }
  explicit PacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Packet> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Packet>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Packet> CreatePacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    TH_Server::TH_Packet::PacketData data_type = TH_Server::TH_Packet::PacketData_NONE,
    ::flatbuffers::Offset<void> data = 0) {
  PacketBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  return builder_.Finish();
}

inline bool VerifyPacketData(::flatbuffers::Verifier &verifier, const void *obj, PacketData type) {
  switch (type) {
    case PacketData_NONE: {
      return true;
    }
    case PacketData_LOGIN: {
      auto ptr = reinterpret_cast<const TH_Server::TH_Packet::LOGIN_DATA *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketData_CHAT: {
      auto ptr = reinterpret_cast<const TH_Server::TH_Packet::CHAT_DATA *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketData_PLAYER: {
      auto ptr = reinterpret_cast<const TH_Server::TH_Packet::PLAYER_DATA *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case PacketData_MONSTER: {
      auto ptr = reinterpret_cast<const TH_Server::TH_Packet::MONSTER_DATA *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyPacketDataVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPacketData(
        verifier,  values->Get(i), types->GetEnum<PacketData>(i))) {
      return false;
    }
  }
  return true;
}

inline const TH_Server::TH_Packet::Protocol *GetProtocol(const void *buf) {
  return ::flatbuffers::GetRoot<TH_Server::TH_Packet::Protocol>(buf);
}

inline const TH_Server::TH_Packet::Protocol *GetSizePrefixedProtocol(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<TH_Server::TH_Packet::Protocol>(buf);
}

inline bool VerifyProtocolBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TH_Server::TH_Packet::Protocol>(nullptr);
}

inline bool VerifySizePrefixedProtocolBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TH_Server::TH_Packet::Protocol>(nullptr);
}

inline void FinishProtocolBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TH_Server::TH_Packet::Protocol> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedProtocolBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<TH_Server::TH_Packet::Protocol> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace TH_Packet
}  // namespace TH_Server

#endif  // FLATBUFFERS_GENERATED_GAMEPACKET_TH_SERVER_TH_PACKET_H_
