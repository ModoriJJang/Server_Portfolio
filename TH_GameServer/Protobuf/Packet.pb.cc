// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#include "Packet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TH_SERVER {
PROTOBUF_CONSTEXPR PACKET::PACKET(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packetdata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.packettype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PACKETDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PACKETDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PACKETDefaultTypeInternal() {}
  union {
    PACKET _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PACKETDefaultTypeInternal _PACKET_default_instance_;
PROTOBUF_CONSTEXPR TH_PACKET::TH_PACKET(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packet_)*/{}
  , /*decltype(_impl_.clientid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TH_PACKETDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TH_PACKETDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TH_PACKETDefaultTypeInternal() {}
  union {
    TH_PACKET _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TH_PACKETDefaultTypeInternal _TH_PACKET_default_instance_;
}  // namespace TH_SERVER
static ::_pb::Metadata file_level_metadata_Packet_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Packet_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Packet_2eproto = nullptr;

const uint32_t TableStruct_Packet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TH_SERVER::PACKET, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TH_SERVER::PACKET, _impl_.packettype_),
  PROTOBUF_FIELD_OFFSET(::TH_SERVER::PACKET, _impl_.packetdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TH_SERVER::TH_PACKET, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TH_SERVER::TH_PACKET, _impl_.clientid_),
  PROTOBUF_FIELD_OFFSET(::TH_SERVER::TH_PACKET, _impl_.packet_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TH_SERVER::PACKET)},
  { 8, -1, -1, sizeof(::TH_SERVER::TH_PACKET)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TH_SERVER::_PACKET_default_instance_._instance,
  &::TH_SERVER::_TH_PACKET_default_instance_._instance,
};

const char descriptor_table_protodef_Packet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Packet.proto\022\tTH_SERVER\"H\n\006PACKET\022*\n\np"
  "ackettype\030\001 \001(\0162\026.TH_SERVER.PACKET_TYPE\022"
  "\022\n\npacketdata\030\002 \001(\t\"@\n\tTH_PACKET\022\020\n\010clie"
  "ntid\030\001 \001(\t\022!\n\006packet\030\002 \003(\0132\021.TH_SERVER.P"
  "ACKET*0\n\013PACKET_TYPE\022\010\n\004CHAT\020\000\022\n\n\006PLAYER"
  "\020\001\022\013\n\007MONSTER\020\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Packet_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Packet_2eproto = {
    false, false, 223, descriptor_table_protodef_Packet_2eproto,
    "Packet.proto",
    &descriptor_table_Packet_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_Packet_2eproto::offsets,
    file_level_metadata_Packet_2eproto, file_level_enum_descriptors_Packet_2eproto,
    file_level_service_descriptors_Packet_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Packet_2eproto_getter() {
  return &descriptor_table_Packet_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Packet_2eproto(&descriptor_table_Packet_2eproto);
namespace TH_SERVER {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PACKET_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Packet_2eproto);
  return file_level_enum_descriptors_Packet_2eproto[0];
}
bool PACKET_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PACKET::_Internal {
 public:
};

PACKET::PACKET(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TH_SERVER.PACKET)
}
PACKET::PACKET(const PACKET& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PACKET* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packetdata_){}
    , decltype(_impl_.packettype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.packetdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packetdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_packetdata().empty()) {
    _this->_impl_.packetdata_.Set(from._internal_packetdata(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.packettype_ = from._impl_.packettype_;
  // @@protoc_insertion_point(copy_constructor:TH_SERVER.PACKET)
}

inline void PACKET::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packetdata_){}
    , decltype(_impl_.packettype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.packetdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packetdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PACKET::~PACKET() {
  // @@protoc_insertion_point(destructor:TH_SERVER.PACKET)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PACKET::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packetdata_.Destroy();
}

void PACKET::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PACKET::Clear() {
// @@protoc_insertion_point(message_clear_start:TH_SERVER.PACKET)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.packetdata_.ClearToEmpty();
  _impl_.packettype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PACKET::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TH_SERVER.PACKET_TYPE packettype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_packettype(static_cast<::TH_SERVER::PACKET_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string packetdata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_packetdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TH_SERVER.PACKET.packetdata"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PACKET::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TH_SERVER.PACKET)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TH_SERVER.PACKET_TYPE packettype = 1;
  if (this->_internal_packettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_packettype(), target);
  }

  // string packetdata = 2;
  if (!this->_internal_packetdata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_packetdata().data(), static_cast<int>(this->_internal_packetdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TH_SERVER.PACKET.packetdata");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_packetdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TH_SERVER.PACKET)
  return target;
}

size_t PACKET::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TH_SERVER.PACKET)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string packetdata = 2;
  if (!this->_internal_packetdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_packetdata());
  }

  // .TH_SERVER.PACKET_TYPE packettype = 1;
  if (this->_internal_packettype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_packettype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PACKET::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PACKET::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PACKET::GetClassData() const { return &_class_data_; }


void PACKET::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PACKET*>(&to_msg);
  auto& from = static_cast<const PACKET&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TH_SERVER.PACKET)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_packetdata().empty()) {
    _this->_internal_set_packetdata(from._internal_packetdata());
  }
  if (from._internal_packettype() != 0) {
    _this->_internal_set_packettype(from._internal_packettype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PACKET::CopyFrom(const PACKET& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TH_SERVER.PACKET)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PACKET::IsInitialized() const {
  return true;
}

void PACKET::InternalSwap(PACKET* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.packetdata_, lhs_arena,
      &other->_impl_.packetdata_, rhs_arena
  );
  swap(_impl_.packettype_, other->_impl_.packettype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PACKET::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[0]);
}

// ===================================================================

class TH_PACKET::_Internal {
 public:
};

TH_PACKET::TH_PACKET(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TH_SERVER.TH_PACKET)
}
TH_PACKET::TH_PACKET(const TH_PACKET& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TH_PACKET* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_){from._impl_.packet_}
    , decltype(_impl_.clientid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientid().empty()) {
    _this->_impl_.clientid_.Set(from._internal_clientid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TH_SERVER.TH_PACKET)
}

inline void TH_PACKET::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_){arena}
    , decltype(_impl_.clientid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TH_PACKET::~TH_PACKET() {
  // @@protoc_insertion_point(destructor:TH_SERVER.TH_PACKET)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TH_PACKET::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packet_.~RepeatedPtrField();
  _impl_.clientid_.Destroy();
}

void TH_PACKET::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TH_PACKET::Clear() {
// @@protoc_insertion_point(message_clear_start:TH_SERVER.TH_PACKET)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.packet_.Clear();
  _impl_.clientid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TH_PACKET::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string clientid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_clientid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TH_SERVER.TH_PACKET.clientid"));
        } else
          goto handle_unusual;
        continue;
      // repeated .TH_SERVER.PACKET packet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packet(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TH_PACKET::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TH_SERVER.TH_PACKET)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientid = 1;
  if (!this->_internal_clientid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TH_SERVER.TH_PACKET.clientid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientid(), target);
  }

  // repeated .TH_SERVER.PACKET packet = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_packet_size()); i < n; i++) {
    const auto& repfield = this->_internal_packet(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TH_SERVER.TH_PACKET)
  return target;
}

size_t TH_PACKET::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TH_SERVER.TH_PACKET)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TH_SERVER.PACKET packet = 2;
  total_size += 1UL * this->_internal_packet_size();
  for (const auto& msg : this->_impl_.packet_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string clientid = 1;
  if (!this->_internal_clientid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TH_PACKET::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TH_PACKET::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TH_PACKET::GetClassData() const { return &_class_data_; }


void TH_PACKET::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TH_PACKET*>(&to_msg);
  auto& from = static_cast<const TH_PACKET&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TH_SERVER.TH_PACKET)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.packet_.MergeFrom(from._impl_.packet_);
  if (!from._internal_clientid().empty()) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TH_PACKET::CopyFrom(const TH_PACKET& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TH_SERVER.TH_PACKET)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TH_PACKET::IsInitialized() const {
  return true;
}

void TH_PACKET::InternalSwap(TH_PACKET* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.packet_.InternalSwap(&other->_impl_.packet_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientid_, lhs_arena,
      &other->_impl_.clientid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TH_PACKET::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TH_SERVER
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TH_SERVER::PACKET*
Arena::CreateMaybeMessage< ::TH_SERVER::PACKET >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TH_SERVER::PACKET >(arena);
}
template<> PROTOBUF_NOINLINE ::TH_SERVER::TH_PACKET*
Arena::CreateMaybeMessage< ::TH_SERVER::TH_PACKET >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TH_SERVER::TH_PACKET >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
